package geekbrains.com;

public class Main {

    public static void main(String[] args) {
	/* 1. Задать целочисленный массив, состоящий из элементов 0 и 1.
    Например: [ 1, 1, 0, 0, 1, 0, 1, 1, 0, 0 ]. С помощью цикла и условия заменить 0 на 1, 1 на 0;
	 */
        int arr1[] = {0, 1, 0, 0, 1, 0};
        for (int i = 0; i < arr1.length; i++) {
            if (arr1[i] == 0)
                arr1[i] = 1;
            else
                arr1[i] = 0;
        }
    /* 2. Задать пустой целочисленный массив размером 8.
    С помощью цикла заполнить его значениями 0 3 6 9 12 15 18 21;
	 */
        int arr2[] = new int[8];
        int num = 0;
        for (int i = 0; i < arr2.length; i++) {
            arr2[i] = num;
            num += 3;
        }
    /* 3. Задать массив [ 1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1 ] пройти по нему циклом,
    и числа меньшие 6 умножить на 2;
	 */
        int arr3[] = {1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1};
        for (int i = 0; i < arr3.length; i++) {
            if (arr3[i] < 6)
                arr3[i] *= 2;
        }
    /* 4. Создать квадратный двумерный целочисленный массив (количество строк и столбцов одинаковое),
    и с помощью цикла(-ов) заполнить его диагональные элементы единицами;
	 */
        int arr4[][] = new int[5][5];
        for (int i = 0; i < arr4.length; i++) {
            for (int j = 0; j < arr4[i].length; j++) {
                if (i == j) arr4[i][j] = 1;
            }
        }
    // 5. ** Задать одномерный массив и найти в нем минимальный и максимальный элементы (без помощи интернета);
        int arr5[] = {3, 5, 7, 9, 55, 1, -8, 76};
        int min = arr5[0], max = arr5[0];
        for (int i = 1; i < arr5.length; i++) {
            if (arr5[i] < min)
                min = arr5[i];
            if (arr5[i] > max)
                max = arr5[i];
        }
    // 6.
        int arr[] = {10, 1, 2, 3, 4};
        System.out.println(task6(arr));

    // 7.
        task7(arr, -22);
        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i]);
        }
    }
    /* 6.** Написать метод, в который передается не пустой одномерный целочисленный массив,
    метод должен вернуть true, если в массиве есть место, в котором сумма левой и правой части массива равны.
    Примеры: checkBalance([2, 2, 2, 1, 2, 2, || 10, 1]) → true, checkBalance([1, 1, 1, || 2, 1]) → true,
    граница показана символами ||, эти символы в массив не входят.
     */

    public static boolean task6(int arr[]) {
        int left = 0, sum = 0;
        boolean a = false;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
        }
        for (int i = 0; i < arr.length; i++) {
            left += arr[i];
            if (left == sum - arr[i]) {
                a = true;
                break;
            }
            sum -= arr[i];
        }
        if (left == 0) // проверка на нулевую сумму элементов массива
            a = false;
        return a;
    }

    /* 7.**** Написать метод, которому на вход подается одномерный массив и число n
    (может быть положительным, или отрицательным), при этом метод должен сместить
    все элементы массива на n позиций. Элементы смещаются циклично. Для усложнения
    задачи нельзя пользоваться вспомогательными массивами. Примеры: [ 1, 2, 3 ]
    при n = 1 (на один вправо) -> [ 3, 1, 2 ]; [ 3, 5, 6, 1] при n = -2 (на два влево)
     -> [ 6, 1, 3, 5 ]. При каком n в какую сторону сдвиг можете выбирать сами.
     */
    public static void task7(int arr[], int n) {
        int s = arr.length;
        while (n < 0) { //проверка на отрицательное значение кол-ва позиций
            n += s;
        }
        while (n > s) { //проверка на значение кол-ва позиций, большее, чем величина массива
            n -= s;
        }
        if (n!=s && n!=0) { //при данных значениях массив остается в том же виде
            int t1, t2 = 0; //temporary variables
            t1 = arr[0];
            arr[0] = arr[s - n];
            for (int i = 1; i < s; i++) { //цикл последовательной замены элементов массива
                int num = i * n;
                if (num < s) {
                    switch (i % 2) { //дополнительного метода для данной операции сооружать не стал
                        case 0:
                            t1 = arr[num];
                            arr[num] = t2;
                            break;
                        case 1:
                            t2 = arr[num];
                            arr[num] = t1;
                            break;
                    }
                } else {
                    while (num > s) { //уменьшение значения слишком большого индекса элемента
                        num -= s;
                    }
                    switch (i % 2) {
                        case 0:
                            t1 = arr[num];
                            arr[num] = t2;
                            break;
                        case 1:
                            t2 = arr[num];
                            arr[num] = t1;
                            break;
                    }
                }
            }
        }
    }
}
